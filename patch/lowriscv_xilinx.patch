diff --git a/src/main/scala/devices/debug/DebugTransport.scala b/src/main/scala/devices/debug/DebugTransport.scala
index 5b28567f9..63a9a0bf1 100644
--- a/src/main/scala/devices/debug/DebugTransport.scala
+++ b/src/main/scala/devices/debug/DebugTransport.scala
@@ -32,9 +32,15 @@ class JtagDTMKeyDefault extends JtagDTMConfig(
   debugIdleCycles = 5) // Reasonable guess for synchronization.
 
 object dtmJTAGAddrs {
+  /*
   def IDCODE       = 0x1
   def DTM_INFO     = 0x10
   def DMI_ACCESS = 0x11
+  Xilinx available user chain codes are limited, so we hack it here, software needs changing too.
+  */
+  def IDCODE     = 0x9
+  def DTM_INFO   = 0x22 // ug570 chapter user3
+  def DMI_ACCESS = 0x23 // ug570 chapter user4
 }
 
 class DMIAccessUpdate(addrBits: Int) extends Bundle {
@@ -256,7 +262,8 @@ class DebugTransportModuleJTAG(debugAddrBits: Int, c: JtagDTMConfig)
   idcode.partNumber := io.jtag_part_number
   idcode.mfrId      := io.jtag_mfr_id
 
-  val tapIO = JtagTapGenerator(irLength = 5,
+  // Xilinx requires an IR length of 6, because of all the other configuration functions etc.
+  val tapIO = JtagTapGenerator(irLength = 6, // (was 5 for official Rocket source code)
     instructions = Map(
       dtmJTAGAddrs.DMI_ACCESS -> dmiAccessChain,
       dtmJTAGAddrs.DTM_INFO   -> dtmInfoChain),
diff --git a/src/main/scala/jtag/JtagTap.scala b/src/main/scala/jtag/JtagTap.scala
index ec5669c97..afff21b26 100644
--- a/src/main/scala/jtag/JtagTap.scala
+++ b/src/main/scala/jtag/JtagTap.scala
@@ -5,6 +5,7 @@ package freechips.rocketchip.jtag
 import scala.collection.SortedMap
 
 import chisel3._
+import chisel3.experimental.{IntParam, StringParam}
 import freechips.rocketchip.config.Parameters
 
 /** JTAG signals, viewed from the master side
@@ -54,13 +55,62 @@ class JtagControllerIO(irLength: Int) extends JtagBlockIO(irLength, false) {
   override def cloneType = new JtagControllerIO(irLength).asInstanceOf[this.type]
 }
 
+/* JTAG state machine Xilinx version */
+// BSCANE2: Boundary-Scan User Instruction
+//          Artix-7
+// Xilinx HDL Language Template, version 2015.4
+
+class BSCANE2(chain: Int) extends BlackBox(Map("DISABLE_JTAG" -> StringParam("FALSE"), "JTAG_CHAIN" -> IntParam(chain))) {
+  val io = IO(new Bundle {
+    val CAPTURE = Output(Bool())
+    val DRCK = Output(Bool())
+    val RESET = Output(Bool())
+    val RUNTEST = Output(Bool())
+    val SEL = Output(Bool())
+    val SHIFT = Output(Bool())
+    val TCK = Output(Clock())
+    val TDI = Output(Bool())
+    val TMS = Output(Bool())
+    val UPDATE = Output(Bool())
+    val TDO = Input(Bool())
+    })
+}
+
+class JtagTapControllerFPGA(irLength: Int, initialInstruction: BigInt)(implicit val p: Parameters) extends Module {
+  require(irLength == 6)  // For Xilinx Artix7 BSCAN
+
+  val io = IO(new JtagControllerIO(irLength))
+
+  val chain22 = Module(new BSCANE2(0x3));
+  val chain23 = Module(new BSCANE2(0x4));
+
+  chain22.io.TDO <> io.dataChainIn.data
+  chain23.io.TDO <> io.dataChainIn.data
+  io.dataChainOut.data := (chain22.io.SEL & chain22.io.TDI) | (chain23.io.SEL & chain23.io.TDI)
+  io.jtag.TDO.driven := true.B
+  io.output.instruction := (chain22.io.SEL * 34.asUInt(irLength.W)) +
+                           (chain23.io.SEL * 35.asUInt(irLength.W))
+  io.dataChainOut.shift := chain22.io.SHIFT | chain23.io.SHIFT
+  io.jtag.TDO.data := io.dataChainOut.data
+  io.dataChainOut.capture := chain22.io.CAPTURE | chain23.io.CAPTURE
+  io.dataChainOut.update := chain22.io.UPDATE | chain23.io.UPDATE
+
+  io.output.tapIsInTestLogicReset := chain22.io.RESET | chain23.io.RESET
+
+  val currState = Wire(JtagState.State.chiselType)
+  val stateMachine = Module(new JtagStateMachine)
+  stateMachine.io.tms := io.jtag.TMS
+  currState := stateMachine.io.currState
+  io.output.state := currState
+}
+
 /** JTAG TAP controller internal block, responsible for instruction decode and data register chain
   * control signal generation.
   *
   * Misc notes:
   * - Figure 6-3 and 6-4 provides examples with timing behavior
   */
-class JtagTapController(irLength: Int, initialInstruction: BigInt)(implicit val p: Parameters) extends Module {
+class JtagTapControllerASIC(irLength: Int, initialInstruction: BigInt)(implicit val p: Parameters) extends Module {
   require(irLength >= 2)  // 7.1.1a
 
   val io = IO(new JtagControllerIO(irLength))
@@ -200,7 +250,7 @@ object JtagTapGenerator {
 
     require(!(allInstructions contains bypassIcode), "instructions may not contain BYPASS code")
 
-    val controllerInternal = Module(new JtagTapController(irLength, initialInstruction))
+    val controllerInternal = Module(new JtagTapControllerFPGA(irLength, initialInstruction))
 
     val unusedChainOut = Wire(new ShifterIO)  // De-selected chain output
     unusedChainOut.shift := false.B
