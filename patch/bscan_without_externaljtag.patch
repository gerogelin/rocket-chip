diff --git a/src/main/scala/devices/debug/DebugTransport.scala b/src/main/scala/devices/debug/DebugTransport.scala
index fc4c501e..17646e1b 100755
--- a/src/main/scala/devices/debug/DebugTransport.scala
+++ b/src/main/scala/devices/debug/DebugTransport.scala
@@ -33,9 +33,15 @@ class JtagDTMKeyDefault extends JtagDTMConfig(
   debugIdleCycles = 5) // Reasonable guess for synchronization.
 
 object dtmJTAGAddrs {
+  /*
   def IDCODE       = 0x1
   def DTM_INFO     = 0x10
   def DMI_ACCESS = 0x11
+Xilinx available user chain codes are limited, so we hack it here, software needs changing too.
+  */
+  def IDCODE     = 0x9
+  def DTM_INFO   = 0x22
+  def DMI_ACCESS = 0x23
 }
 
 class DMIAccessUpdate(addrBits: Int) extends Bundle {
@@ -80,18 +86,23 @@ class DebugTransportModuleJTAG(debugAddrBits: Int, c: JtagDTMConfig)
   (implicit val p: Parameters) extends RawModule  {
 
   val io = IO(new Bundle {
-    val jtag_clock = Input(Clock())
+    //val jtag_clock = Input(Clock())
+    val jtag_clock = Output(Clock())
     val jtag_reset = Input(Reset()) // This is internally converted to AsyncReset.
                                     // We'd prefer to call this AsyncReset, but that's a fairly
                                     // invasive API change.
     val dmi = new DMIIO()(p)
-    val jtag = Flipped(new JTAGIO(hasTRSTn = false)) // TODO: re-use SystemJTAGIO here?
+    //val jtag = Flipped(new JTAGIO(hasTRSTn = false)) // TODO: re-use SystemJTAGIO here?
     val jtag_mfr_id = Input(UInt(11.W))
     val jtag_part_number = Input(UInt(16.W))
     val jtag_version = Input(UInt(4.W))
   })
   val rf_reset = IO(Input(Reset()))    // RF transform
 
+  // Xilinx requires an IR length of 6, because of all the other configuration functions etc.
+  val fpgaTap = Module(new JtagTapControllerFPGA(irLength = 6))  // (was 5 for official Rocket source code)
+  io.jtag_clock := fpgaTap.io.jtag_clock.get
+
   withClockAndReset(io.jtag_clock, io.jtag_reset.asAsyncReset) {
 
   //--------------------------------------------------------
@@ -261,11 +272,12 @@ class DebugTransportModuleJTAG(debugAddrBits: Int, c: JtagDTMConfig)
     instructions = Map(
       dtmJTAGAddrs.DMI_ACCESS -> dmiAccessChain,
       dtmJTAGAddrs.DTM_INFO   -> dtmInfoChain),
-    icode = Some(dtmJTAGAddrs.IDCODE)
+    icode = Some(dtmJTAGAddrs.IDCODE),
+    fpgaTap
   )
 
   tapIO.idcode.get := idcode
-  tapIO.jtag <> io.jtag
+  //tapIO.jtag <> io.jtag
 
   tapIO.control.jtag_reset := io.jtag_reset.asAsyncReset
 
diff --git a/src/main/scala/devices/debug/Periphery.scala b/src/main/scala/devices/debug/Periphery.scala
index b66b9784..6c7f3289 100755
--- a/src/main/scala/devices/debug/Periphery.scala
+++ b/src/main/scala/devices/debug/Periphery.scala
@@ -154,11 +154,11 @@ trait HasPeripheryDebugModuleImp extends LazyModuleImp {
   def instantiateJtagDTM(sj: SystemJTAGIO): DebugTransportModuleJTAG = {
 
     val dtm = Module(new DebugTransportModuleJTAG(p(DebugModuleKey).get.nDMIAddrSize, p(JtagDTMKey)))
-    dtm.io.jtag <> sj.jtag
+    //dtm.io.jtag <> sj.jtag
 
-    debug.map(_.disableDebug.foreach { x => dtm.io.jtag.TMS := sj.jtag.TMS | x })  // force TMS high when debug is disabled
+    //debug.map(_.disableDebug.foreach { x => dtm.io.jtag.TMS := sj.jtag.TMS | x })  // force TMS high when debug is disabled
 
-    dtm.io.jtag_clock  := sj.jtag.TCK
+    //dtm.io.jtag_clock  := sj.jtag.TCK
     dtm.io.jtag_reset  := sj.reset
     dtm.io.jtag_mfr_id := sj.mfr_id
     dtm.io.jtag_part_number := sj.part_number
@@ -167,7 +167,7 @@ trait HasPeripheryDebugModuleImp extends LazyModuleImp {
 
     outer.debugOpt.map { outerdebug => 
       outerdebug.module.io.dmi.get.dmi <> dtm.io.dmi
-      outerdebug.module.io.dmi.get.dmiClock := sj.jtag.TCK
+      outerdebug.module.io.dmi.get.dmiClock := dtm.io.jtag_clock
       outerdebug.module.io.dmi.get.dmiReset := sj.reset
     }
     dtm
diff --git a/src/main/scala/jtag/JtagTap.scala b/src/main/scala/jtag/JtagTap.scala
index 54762d23..5f940127 100755
--- a/src/main/scala/jtag/JtagTap.scala
+++ b/src/main/scala/jtag/JtagTap.scala
@@ -6,6 +6,7 @@ import scala.collection.SortedMap
 
 import chisel3._
 import chisel3.util._
+import chisel3.experimental.{IntParam, StringParam}
 import freechips.rocketchip.config.Parameters
 
 /** JTAG signals, viewed from the master side
@@ -36,9 +37,10 @@ class JtagControl extends Bundle {
 
 /** Aggregate JTAG block IO.
   */
-class JtagBlockIO(irLength: Int, hasIdcode:Boolean = true) extends Bundle {
+class JtagBlockIO(irLength: Int, hasIdcode:Boolean = true, hasClock: Boolean = false) extends Bundle {
 
-  val jtag = Flipped(new JTAGIO())
+  val jtag_clock = if (hasClock) Some(Output(Clock())) else None
+  //val jtag = Flipped(new JTAGIO())
   val control = new JtagControl
   val output = new JtagOutput(irLength)
   val idcode = if (hasIdcode) Some(Input(new JTAGIdcodeBundle())) else None
@@ -48,20 +50,71 @@ class JtagBlockIO(irLength: Int, hasIdcode:Boolean = true) extends Bundle {
 
 /** Internal controller block IO with data shift outputs.
   */
-class JtagControllerIO(irLength: Int) extends JtagBlockIO(irLength, false) {
+class JtagControllerIO(irLength: Int) extends JtagBlockIO(irLength, false, true) {
   val dataChainOut = Output(new ShifterIO)
   val dataChainIn = Input(new ShifterIO)
 
   override def cloneType = new JtagControllerIO(irLength).asInstanceOf[this.type]
 }
 
+/* JTAG state machine Xilinx version */
+// BSCANE2: Boundary-Scan User Instruction
+//          Artix-7
+// Xilinx HDL Language Template, version 2015.4
+
+class BSCANE2(chain: Int) extends BlackBox(Map("DISABLE_JTAG" -> StringParam("FALSE"), "JTAG_CHAIN" -> IntParam(chain))) {
+  val io = IO(new Bundle {
+    val CAPTURE = Output(Bool())
+    val DRCK = Output(Bool())
+    val RESET = Output(Bool())
+    val RUNTEST = Output(Bool())
+    val SEL = Output(Bool())
+    val SHIFT = Output(Bool())
+    val TCK = Output(Clock())
+    val TDI = Output(Bool())
+    val TMS = Output(Bool())
+    val UPDATE = Output(Bool())
+    val TDO = Input(Bool())
+    })
+}
+
+class JtagTapControllerFPGA(irLength: Int)(implicit val p: Parameters) extends Module {
+  require(irLength == 6)  // For Xilinx Artix7 BSCAN
+
+  val io = IO(new JtagControllerIO(irLength))
+
+  val chain22 = Module(new BSCANE2(0x3));
+  val chain23 = Module(new BSCANE2(0x4));
+
+  withClock(chain22.io.TCK) {
+  chain22.io.TDO <> io.dataChainIn.data
+  chain23.io.TDO <> io.dataChainIn.data
+  io.dataChainOut.data := (chain22.io.SEL & chain22.io.TDI) | (chain23.io.SEL & chain23.io.TDI)
+  //io.jtag.TDO.driven := true.B
+  io.output.instruction := (chain22.io.SEL * 34.asUInt(irLength.W)) +
+                           (chain23.io.SEL * 35.asUInt(irLength.W))
+  io.dataChainOut.shift := chain22.io.SHIFT | chain23.io.SHIFT
+  //io.jtag.TDO.data := io.dataChainOut.data
+  io.dataChainOut.capture := chain22.io.CAPTURE | chain23.io.CAPTURE
+  io.dataChainOut.update := chain22.io.UPDATE | chain23.io.UPDATE
+
+  io.output.tapIsInTestLogicReset := chain22.io.RESET | chain23.io.RESET
+
+  val currState = Wire(JtagState.State.chiselType)
+  val stateMachine = Module(new JtagStateMachine)
+  stateMachine.io.tms := chain22.io.TMS
+  currState := stateMachine.io.currState
+  io.output.state := currState
+  io.jtag_clock.get := chain22.io.TCK
+}}
+
 /** JTAG TAP controller internal block, responsible for instruction decode and data register chain
   * control signal generation.
   *
   * Misc notes:
   * - Figure 6-3 and 6-4 provides examples with timing behavior
   */
-class JtagTapController(irLength: Int, initialInstruction: BigInt)(implicit val p: Parameters) extends Module {
+/*class JtagTapControllerASIC(irLength: Int, initialInstruction: BigInt)(implicit val p: Parameters) extends Module {
   require(irLength >= 2)  // 7.1.1a
 
   val io = IO(new JtagControllerIO(irLength))
@@ -147,7 +200,7 @@ class JtagTapController(irLength: Int, initialInstruction: BigInt)(implicit val
     tdo := DontCare
     tdo_driven := false.B
   }
-}
+}*/
 
 object JtagTapGenerator {
   /** JTAG TAP generator, enclosed module must be clocked from TCK and reset from output of this
@@ -174,7 +227,12 @@ object JtagTapGenerator {
     * TODO:
     * - support concatenated scan chains
     */
-  def apply(irLength: Int, instructions: Map[BigInt, Chain], icode: Option[BigInt] = None)(implicit p: Parameters): JtagBlockIO = {
+  //def apply(irLength: Int)(implicit p: Parameters): JtagTapControllerFPGA= {
+    //val controllerInternal = Module(new JtagTapControllerFPGA(irLength))
+    //controllerInternal
+  //}
+
+  def apply(irLength: Int, instructions: Map[BigInt, Chain], icode: Option[BigInt] = None, controllerInternal: JtagTapControllerFPGA)(implicit p: Parameters): JtagBlockIO = {
 
     val internalIo = Wire(new JtagBlockIO(irLength, icode.isDefined))
 
@@ -201,7 +259,7 @@ object JtagTapGenerator {
 
     require(!(allInstructions contains bypassIcode), "instructions may not contain BYPASS code")
 
-    val controllerInternal = Module(new JtagTapController(irLength, initialInstruction))
+    //val controllerInternal = Module(new JtagTapControllerFPGA(irLength))
 
     val unusedChainOut = Wire(new ShifterIO)  // De-selected chain output
     unusedChainOut.shift := false.B
@@ -256,7 +314,8 @@ object JtagTapGenerator {
 
     chainToSelect.map(mapInSelect)
 
-    internalIo.jtag <> controllerInternal.io.jtag
+    //internalIo.jtag_clock := controllerInternal.io.jtag_clock
+    //internalIo.jtag <> controllerInternal.io.jtag
     internalIo.control <> controllerInternal.io.control
     internalIo.output <> controllerInternal.io.output
 
